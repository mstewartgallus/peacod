//Copyright 2019 Steven-Stewart-Gallus
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
syntax = "proto3";

package peacod_ast;

option java_package = "com.sstewartgallus.peacod.ast";
option java_multiple_files = true;

message LibraryDef {
    uint32 version = 1;
    string name = 2;
    map<string, Def> def = 3;
}

// Fixme, just rename Def or something
message Def {
    TypeSchemeExpr type = 1;
    // The arity of a definition has actually pretty little to do with the type
    uint32 arity = 2;
    Expr body = 3;
}

// FIXME: Rename as Term?
message Expr {
    // FIXME Add debug information
    oneof value {
        Variable variable = 1;
        Constant constant = 2;
        Call call = 3;
    }

    message Literal {
        oneof value {
            LiteralFalse literal_false = 2;
            LiteralTrue literal_true = 3;

            LiteralByte literal_byte = 4;
            LiteralShort literal_short = 5;
            LiteralInteger literal_int = 6;
            LiteralLong literal_long = 7;
        }
    }

    message Constant {
        oneof value {
            TermReference reference = 1;
            Literal literal = 2;
        }
    }

    message Call {
        Constant function = 1;
        repeated TypeExpr type_argument = 2;
        repeated Expr argument = 3;
    }

    message TermReference {
        Reference reference = 1;
        TypeSchemeExpr scheme = 2;
    }

    message Reference {
        string library = 1;
        string name = 2;
    }

    message Variable {
        TypeExpr type = 1;
        uint32 index = 2;
    }

    message LiteralFalse {
    }
    message LiteralTrue {
    }

    message LiteralByte {
        int32 value = 1;
    }
    message LiteralShort {
        int32 value = 1;
    }
    message LiteralInteger {
        int32 value = 1;
    }
    message LiteralLong {
        int64 value = 1;
    }
}

// FIXME: Rename as Type
message TypeExpr {
    oneof value {
        Literal literal = 1;
        Variable variable = 2;
    }

    // FIXME? arity
    message Literal {
        string library = 1;
        string name = 2;
        repeated TypeExpr argument = 3;
    }

    message Variable {
        // FIXME... give a kind?
        uint32 index = 1;
    }
}

message TypeSchemeExpr {
    TypeExpr type = 1;
    uint32 arity = 2;
}